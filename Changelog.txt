Changelog 22. Nov 2018.
	-Fixed some Assembler parser bugs
	-Made a debugger program which takes a normal Simulated-PC program, runs it and collects all the data
	 from it, then displays it on screen. You can step trough each instruction and see all the registers,
	 flags and both stacks content at each instruction. It also dynamicaly updates the memory content display
	 to show the current memory contents at that step. Use W to go to next instruction, S to go to the previous
	 one, E to go to the next page in memory (next addresses which can't currently be shown on screen) and D to
	 go to previous page in memory.

	 --IMPORTANT--
	 Flags to compile the programs:
	 Simulated-PC: g++ -o Simulated-PC.exe source/*.cpp -Iinclude
	 Assembler: g++ -o Assembler.exe Main.cpp
	 Debugger: g++ -o Debugger.exe source/*.cpp -Iinclude

Changelog 19. Nov 2018.
	-Fixed a bug in assembler where it would crash if you typed in 0x or 0b only as an argument
	-Added labels to the assembler
	-Added option to use labels as 16 bit arguments
	-Made it so comments can be typed anywhere, even after instructions
	-Added some more detailed error messages to the assembler
	-Added colours to assembler output messages

Changelog 18. Nov 2018.
	-Added undeflow flag to the CPU and a jump instruction for it
	-Added options to print as unsigned or signed integers to console
	-Added signed variation of the division instruction
	-Created an assembler for the CPU instruction set, more info on it
	 and how to use in Assembler/README.md
	--NEW--
	-Added debug mode to the CPU, now you need to put true or false after
	 as an execution argument, if you put true, it will write to output.log
	-Added some warning if the CPU doesn't have correct arguments.
	-Fixed assembler bug where it would crash if there was empty new line and
	 where it would not recognize hex or binary numbers